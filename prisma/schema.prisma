// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    // emailVerified DateTime?
    image             String?
    sub               String?             @unique
    accounts          Account[]
    sessions          Session[]
    // posts    Post[]
    playerLists       PlayerList[]
    PositionRanksList PositionRanksList[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Player {
    injury_status          Boolean
    sport                  String
    team                   String
    fantasy_data_id        Int
    years_exp              Int
    active                 Boolean
    depth_chart_order      Int
    search_last_name       String
    swish_id               Int
    college                String
    // competitions           Int[]
    oddsjam_id             Int
    player_id              Int                @unique
    rotowire_id            Int
    team_abbr              String
    weight                 String
    gsis_id                String
    injury_start_date      String
    status                 String
    stats_id               Int
    age                    Int
    // fantasy_positions      String[]
    depth_chart_position   String
    birth_state            String
    full_name              String
    // metadata Object
    rotoworld_id           Int
    espn_id                Int
    practice_description   String
    news_updated           String
    pandascore_id          Int
    first_name             String
    birth_country          String
    hashtag                String
    team_changed_at        String
    birth_city             String
    birth_date             String
    last_name              String
    search_full_name       String
    opta_id                Int
    sportradar_id          String
    high_school            String
    position               String
    search_rank            Int
    injury_notes           String
    yahoo_id               Int
    practice_participation String
    number                 Int
    height                 String
    search_first_name      String
    injury_body_part       String
    PositionRanksList      PositionRanksList? @relation(fields: [positionRanksListId], references: [id])
    positionRanksListId    String?
}

model PlayerLessInfo {
    player_id     Int         @unique
    full_name     String
    first_name    String
    last_name     String
    position      String
    PlayerList    PlayerList? @relation(fields: [playerListId], references: [id])
    playerListId  String?
    positionIndex Int?
}

model PlayerList {
    id             String           @id @default(cuid())
    playerLessInfo PlayerLessInfo[]
    createdBy      User             @relation(fields: [userId], references: [id])
    userId         String
    type           String
}

model PositionRanksList {
    id            String   @id @default(cuid())
    positionRanks Player[]
    createdBy     User     @relation(fields: [userId], references: [id])
    userId        String
}
